#=============================
#=== MILORD BASH SHORTCUTS ===
#=============================

DEV_ROOT=/home/Projects/Dappd
MUSIC_URL="https://music.youtube.com/playlist?list=PLY_FQXauSxlCyhLLYaOrxIX_4IlQ-wxIJ"

#general misc
bind 'TAB:menu-complete'
alias bthemes="cd ~/.bash-it/themes && ls"
alias bashrc="sudo nano ~/.bashrc"
alias clippyengine="cd ~/Projects/ClippyEditor/src/main/python/clippyengine"
alias rmpyc="find . -name \*.pyc -delete"
#ng
alias buildprod="ng build --aot --prod --output-hashing=none"
alias ndir="cd /etc/nginx/sites-available"
alias devops="dev && cd devops/webhooks"
alias d="devops"
alias n="ndir"
alias shit="d && docker compose ps --services | xargs -I {} docker compose up -d {} || true && check"


#pm2 
alias plogs="pm2 logs"
alias plist="pm2 list"
alias pls="pm2 list"
alias monit="pm2 monit"
alias del="pm2 del"

#proxy couch
function couchproxy()
{
	couchpod="$*"
	kubectl port-forward "$(couchpod)" 5584:5984
}

#python
alias ae="source ./venv/bin/activate"
alias de="deactivate"

function fuck()
{
	fuckwhat="$*"
	if [[ $fuckwhat == "you" ]]; then
		echo "fuck you too"
	else
		echo "yeah... fuck $fuckwhat"
	fi
}

#general shortcuts
alias dev="cd $DEV_ROOT"
alias milord="nano ~/.milord_aliases"
alias hosts="sudo nano /etc/hosts"

function kunamespace()
{
	currentcontext="$(kubectl config view --minify --output 'jsonpath={..current-context}')"
	kubectl config set-context $currentcontext --namespace $*
	kubectl config get-contexts
}

function kuse()
{
	kubectl config use $@;
	kubectl config get-contexts;
}

function customimage()
{
	custom=$@
	custom="${custom}"
	docker build -t clincard:base -f docker/base-deploy .
	docker build -t 160116585046.dkr.ecr.us-west-2.amazonaws.com/clincard:app-${custom} -f docker/app-image .
	docker push 160116585046.dkr.ecr.us-west-2.amazonaws.com/clincard:app-${custom}
}

alias rk="bash /home/milord/Projects/GreenphireDevTools/clincard/scripts/LABS/launch_sqa.sh"
alias kupods="kubectl get pods"
alias kube="kubectl"
alias kuconfig="kubectl config"

function kubash()
{
	kubectl exec -it $@ -- /bin/bash;
}

#commits this alias file
function milord-commit()
{ 
	currpath = $PWD
	cd $DEV_ROOT/../MilordShortcuts 
	git add . 
	git commit
	git status
	cd $currpath
}

#pushes this alias file to the remote repo
function milord-push()
{
	currpath = $PWD
	cd $DEV_ROOT/../MilordShortcuts
	git push
	cd $currpath
}

#opens the file explorer at current location
alias explore="nautilus . &"

#Refreshes the ".bashrc" file
function refreshenv()
{
    if [ -n "`$SHELL -c 'echo $ZSH_VERSION'`" ]; then
       source ~/.zshrc
    elif [ -n "`$SHELL -c 'echo $BASH_VERSION'`" ]; then
       source ~/.bashrc
    else
       echo "Looks like .milord_aliases is not compatible with your shell environment"
       echo "Feel free to make a pull request!"
    fi
}

#docker
alias docker-compose="docker compose"
alias dope="docker-compose"
#docker ups everything that is exited
alias doperr="docker-compose ps | grep Exit | xargs sh -c \"docker-compose up -d || true\""
#logs only the last 1000 lines of container
alias dlogs="docker-compose logs -f $1 --tail 1000"
#opens the posgres container for clincard (work)
alias clindb="docker-compose run --rm db psql -h db -U postgres"

#execs into the container
function dbash()
{
	docker-compose exec $@ /bin/sh
}

#manual switch of kube configs context
function kuswitch()
{
	cp ~/.kube/conf.d/$@ ~/.kube/config
}

#stops, removes, ups, and logs the container
function dreset()
{
	docker-compose stop $1
	docker-compose rm $1
	docker-compose up -d --build $1
	docker-compose logs -f $1
}

#docker ps or ps a specific container
function check()
{
        if [ $# -eq 0 ]; then
                docker-compose ps
        else
                docker-compose ps | grep $@
        fi
}

#ups all containers, then waits for clincard to start fully (work)
function dopeup()
{
	docker-compose up -d
	docker-compose logs -f &
		while [ !$(docker-compose logs clincard | grep "Starting ClamAV virus") ]; do
			echo "Waiting for ClamAV to start..."
			sleep 1s
		done
	sleep 1s
	ps -eaf | grep docker-compose | grep logs | awk '{print $2}' | xargs kill -9
}

alias piip="cat /var/lib/misc/dnsmasq.leases | cut -d ' ' -f 3"

#kubernetes
alias ku="kubectl"
alias kupeek="kubectl get deployments.apps $1 -o yaml"

#amazon aws cli tool
#alias aws-login="eval $(aws ecr get-login --no-include-email --region us-west-2)"
function aws-login()
{
   cd ~ && ./awsmfa.sh $1
   . ~/.aws/.mfa_creds   
   eval $(aws ecr get-login --no-include-email --region us-west-2)
}

#sublime text update completions
alias subl-update="cp -r $DEV_ROOT/MilordShortcuts/sublimetext/* ~/.config/sublime-text-3/Packages/User"

#opens my awesome music playlist
alias music="google-chrome $MUSIC_URL &"

#git commands
#status
alias stats="git status"
#add
alias adal="git add ."
#init
alias ginit="git init"
#pull
alias pull="git pull"
#push
alias push="git push"
#log
alias glog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
#commits with message
alias gitmit="git commit -m"
#looks at all remote and local branches
alias branchall="git branch --all"
#shows the stashed diff
alias stashdiff="git stash show num -p"
#pulls then creates a new branch
alias newbranch="git pull && git checkout -b $@"
#prunes local branches based on remote

#Written by Isaac Lubanko
#gets the url of the remote repo
function giturl()
{
​	repo=$(git config --get remote.origin.url)
	# flips the remote url around, cuts off the .git (or tig.) then flips it back around
	# kind of hacky but it works
	if [[ $(git config --get remote.origin.url | grep .git) ]]
	then
		repo=$(git config --get remote.origin.url | sed 's/git@/https:\/\//' | sed 's/m:/m\//')
	fi
​
	# isolates the branch you are currenty checked out to, removes * 
	#branch=$(git branch | grep \* | cut -d ' ' -f2)
	echo $repo
	google-chrome $repo &
}


#checkout all or specific stuff
function chout()
{
	if [ $# -eq 0 ]; then
		git checkout .
	else
		git checkout $@ 
	fi
}

function prunelocal()
{
	git pull --prune
	git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d
}

#see ALL the current branches of everything in your main development folder
function gitall-branches() #Created by Greg Ruane
{
    # subshell to revert cd
    (
        output=()
        for subdir in $(find $DEV_ROOT -maxdepth 2 -type d | sort); do
            if [ -L "$subdir" ]; then
                continue
            fi

            # git submodules use a file, standalones use a dir
            if [ -f "$subdir/.git" ] || [ -d "$subdir/.git" ]; then
                branch="[$(cd "$subdir"; git  branch | grep '^\*' | cut -d' ' -f2)]"
                # printf "%-30s %-30s\n" $(basename $subdir) $branch
                line=$(printf "%-30s %-30s\n" $(basename $subdir) $branch)
                output+=$line
                echo "$line"
            fi
        done
    )
}

#get the last kube image name
alias getLatestImage="aws ecr describe-images --repository-name rideshare-service --query 'sort_by(imageDetails,& imagePushedAt)[-1]'"

#pull and prunes ALL repos in your dev folder
function pullall()
{
    # subshell to revert cd
    (
        output=()
        for subdir in $(find $DEV_ROOT -maxdepth 2 -type d | sort); do
            if [ -L "$subdir" ]; then
                continue
            fi

            # git submodules use a file, standalones use a dir
            if [ -f "$subdir/.git" ] || [ -d "$subdir/.git" ]; then
                echo $subdir
		cd $subdir && git pull && git pull --prune && git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d
		echo ""
            fi
        done
    )
}

#switches the branch of every submodule and repo to specific one
function choutall()
{
    # subshell to revert cd
    (
        output=()
        for subdir in $(find $PWD -maxdepth 2 -type d | sort); do
            if [ -L "$subdir" ]; then
                continue
            fi

            # git submodules use a file, standalones use a dir
            if [ -f "$subdir/.git" ] || [ -d "$subdir/.git" ]; then
                cd $subdir && git checkout $@
            fi
        done
    )
}

#attaches the docker instance to the shell
function dattach() 
{
	args=$1
	appendage="_1"
	dname=$args$appendage
	docker attach $(docker ps -qf "name=$dname")
}


function kuportforward()
{
	podname=$@
	kubectl describe pod $podname | grep Port
	echo "Which pod port?"
	read kuport
	echo "Which local port do you want to use?"
	read localport
	kubectl port-forward $podname $localport:$kuport
	
}
