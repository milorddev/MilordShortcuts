#configs - edit them to your liking

###ALIAS###
#bthemes
#buildprod
#ae
#de
#dev
#milord
#milord-update
#explore
#dope
#doperr
#kubl
#aws-login
#subl-update
#music
#stats
#adal
#ginit
#pull
#push
#glog
#gitmit
#branchall
#stashdiff

###FUNCTIONS###
#milord-commit()
#milord-push()
#refreshenv()
#dbash()
#dreset()
#check()
#dopeup()
#giturl()
#chout()
#gitall-branches()
#pullall()


DEV_ROOT=~/Projects
MUSIC_URL="https://music.youtube.com/playlist?list=PLY_FQXauSxlCyhLLYaOrxIX_4IlQ-wxIJ"

#general misc
bind 'TAB:menu-complete'
alias bthemes="cd ~/.bash-it/themes && ls"

#ng
alias buildprod="ng build --aot --prod --output-hashing=none"

#python
alias ae="source ./venv/bin/activate"
alias de="deactivate"

#general shortcuts
alias dev="cd $DEV_ROOT"
alias milord="nano ~/.milord_aliases"
alias milord-update="cp ~/.milord_aliases $DEV_ROOT/MilordShortcuts/.milord_aliases"

function milord-commit()
{ 
	currpath = $PWD
	cd $DEV_ROOT/MilordShortcuts 
	git add . 
	git commit
	git status
	cd $currpath
}


function milord-push()
{
	currpath = $PWD
	cd $DEV_ROOT/MilordShortcuts
	git push
	cd $currpath
}

alias explore="nautilus . &"
function refreshenv()
{
    if [ -n "`$SHELL -c 'echo $ZSH_VERSION'`" ]; then
       source ~/.zshrc
    elif [ -n "`$SHELL -c 'echo $BASH_VERSION'`" ]; then
       source ~/.bashrc
    else
       echo "Looks like .milord_aliases is not compatible with your shell environment"
       echo "Feel free to make a pull request!"
    fi
}

#docker
alias dope="docker-compose"
alias doperr="docker-compose ps | grep Exit | xargs sh -c \"docker-compose up -d || true\""

function dbash()
{
	docker-compose exec $@ /bin/bash
}

function dreset()
{
	docker-compose stop $1
	docker-compose rm $1
	docker-compose up -d --build $1
	docker-compose logs -f $1
}

#alias check="docker-compose ps"
function check()
{
        if [ $# -eq 0 ]; then
                docker-compose ps
        else
                docker-compose ps | grep $@
        fi
}


function dopeup()
{
	docker-compose up -d
	docker-compose logs -f &
		while [ !$(docker-compose logs clincard | grep "Starting ClamAV virus") ]; do
			echo "Waiting for ClamAV to start..."
			sleep 1s
		done
	sleep 1s
	ps -eaf | grep docker-compose | grep logs | awk '{print $2}' | xargs kill -9
}


#kubernetes
alias kubl="kubectl"

#amazon aws cli tool
alias aws-login="eval $(aws ecr get-login --no-include-email --region us-west-2)"

#sublime text update completions
alias subl-update="cp -r $DEV_ROOT/MilordShortcuts/sublimetext/* ~/.config/sublime-text-3/Packages/User"

#fun stuff
alias music="google-chrome $MUSIC_URL &"

#git command shortcuts
alias stats="git status"
alias adal="git add ."
alias ginit="git init"
alias pull="git pull"
alias push="git push"
alias glog="git log"
alias gitmit="git commit -m"
alias branchall="git branch --all"
alias stashdiff="git stash show num -p"

#Written by Isaac Lubanko
function giturl()
{
​	repo=$(git config --get remote.origin.url)
	# flips the remote url around, cuts off the .git (or tig.) then flips it back around
	# kind of hacky but it works
	if [[ $(git config --get remote.origin.url | grep .git) ]]
	then
		repo=$(git config --get remote.origin.url | sed 's/git@/https:\\\\/')
	fi
​
	# isolates the branch you are currenty checked out to, removes * 
	#branch=$(git branch | grep \* | cut -d ' ' -f2)
	echo $repo
	google-chrome $repo &
}


#alias chout="git checkout"
function chout()
{
	if [ $# -eq 0 ]; then
		git checkout .
	else
		git checkout $@ 
	fi
}

function gitall-branches() #Created by Greg Ruane
{
    # subshell to revert cd
    (
        output=()
        for subdir in $(find $DEV_ROOT -maxdepth 2 -type d | sort); do
            if [ -L "$subdir" ]; then
                continue
            fi

            # git submodules use a file, standalones use a dir
            if [ -f "$subdir/.git" ] || [ -d "$subdir/.git" ]; then
                branch="[$(cd "$subdir"; git  branch | grep '^\*' | cut -d' ' -f2)]"
                # printf "%-30s %-30s\n" $(basename $subdir) $branch
                line=$(printf "%-30s %-30s\n" $(basename $subdir) $branch)
                output+=$line
                echo "$line"
            fi
        done
    )
}

function pullall()
{
    # subshell to revert cd
    (
        output=()
        for subdir in $(find $DEV_ROOT -maxdepth 2 -type d | sort); do
            if [ -L "$subdir" ]; then
                continue
            fi

            # git submodules use a file, standalones use a dir
            if [ -f "$subdir/.git" ] || [ -d "$subdir/.git" ]; then
                cd $subdir && git pull
            fi
        done
    )
}

